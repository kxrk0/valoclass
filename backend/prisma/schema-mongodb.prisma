// MongoDB Schema for ValoClass
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  username    String   @unique
  passwordHash String?
  displayName String?
  avatar      String?
  bio         String?
  role        String   @default("USER") // USER, MODERATOR, ADMIN
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  isPremium   Boolean  @default(false)
  
  // OAuth
  googleId    String?
  discordId   String?
  riotId      String?
  
  // Stats
  preferences Json     @default("{}")
  stats       Json     @default("{}")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  lineups     Lineup[]
  crosshairs  Crosshair[]
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  reports     Report[]
  sessions    Session[]
  accounts    Account[]

  @@map("users")
}

model Lineup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  
  // Lineup info
  agent       String
  map         String
  site        String
  side        String   // ATTACKER, DEFENDER
  difficulty  String   @default("MEDIUM") // EASY, MEDIUM, HARD
  
  // Position data
  position    Json
  
  // Content
  instructions String[]
  images      String[]
  videoUrl    String?
  tags        String[]
  shareCode   String?   @unique
  
  // Status
  status      String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  isPublic    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Stats
  views       Int      @default(0)
  likes       Int      @default(0)
  bookmarks   Int      @default(0)
  stats       Json     @default("{}")
  
  // SEO
  seo         Json     @default("{}")
  
  // Relations
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  userLikes   Like[]
  userBookmarks Bookmark[]
  reports     Report[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lineups")
}

model Crosshair {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  
  // Settings
  settings    Json
  shareCode   String?  @unique
  
  // Metadata
  tags        String[]
  category    String   @default("GENERAL") // GENERAL, PRIMARY, ADS, SNIPER
  
  // Status
  isPublic    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Stats
  views       Int      @default(0)
  likes       Int      @default(0)
  bookmarks   Int      @default(0)
  downloads   Int      @default(0)
  stats       Json     @default("{}")
  
  // Relations
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  userLikes   Like[]
  userBookmarks Bookmark[]
  reports     Report[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("crosshairs")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  
  // Relations
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Entity info
  entityType  String   // LINEUP, CROSSHAIR, USER
  entityId    String   @db.ObjectId
  
  // Optional relations
  lineup      Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair   Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Nested comments
  parentId    String?  @db.ObjectId
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies     Comment[] @relation("CommentReplies")
  
  // Status
  status      String   @default("ACTIVE") // ACTIVE, HIDDEN, DELETED
  isEdited    Boolean  @default(false)
  
  // Stats
  likes       Int      @default(0)
  stats       Json     @default("{}")
  
  // Relations
  userLikes   Like[]
  reports     Report[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // User
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType String  // LINEUP, CROSSHAIR, COMMENT
  entityId   String  @db.ObjectId
  
  // Optional relations
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, entityType, entityId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // User
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType String  // LINEUP, CROSSHAIR
  entityId   String  @db.ObjectId
  
  // Optional relations
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, entityType, entityId])
  @@map("bookmarks")
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Reporter
  reporterId  String   @db.ObjectId
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType  String   // LINEUP, CROSSHAIR, COMMENT, USER
  entityId    String   @db.ObjectId
  
  // Optional relations
  lineup      Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair   Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment     Comment?   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Report info
  reason      String   // SPAM, INAPPROPRIATE, COPYRIGHT, HARASSMENT, OTHER
  description String?
  status      String   @default("PENDING") // PENDING, REVIEWED, RESOLVED, DISMISSED
  
  // Resolution
  resolvedBy   String?  @db.ObjectId
  resolution   String?
  resolvedAt   DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Account {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  
  userId           String  @db.ObjectId
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type             String  // oauth, credentials
  provider         String
  providerAccountId String
  
  refresh_token    String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
