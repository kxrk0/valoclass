// ValoClass Unified Schema - Complete & Optimized
// Generated by combining all schemas and fixing inconsistencies

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  displayName String?
  avatar    String?
  
  // Authentication
  passwordHash String?
  isVerified   Boolean @default(false)
  isActive     Boolean @default(true)
  isPremium    Boolean @default(false)
  
  // Role and permissions
  role     UserRole @default(USER)
  
  // Profile data
  bio          String?
  country      String?
  favoriteAgent String?
  
  // Game stats (JSON for flexibility)
  gameStats    Json?
  preferences  Json?
  stats        Json?
  
  // Social
  followers Int @default(0)
  following Int @default(0)
  
  // Relations
  lineups         Lineup[]
  crosshairs      Crosshair[]
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  reports         Report[]
  sessions        Session[]
  accounts        Account[]
  achievements    UserAchievement[]
  activities      Activity[]
  authEvents      AuthEvent[]
  followers_rel   Follow[] @relation("UserFollowers")
  following_rel   Follow[] @relation("UserFollowing")
  pageViews       PageView[]
  errorLogs       ErrorLog[]
  
  // Timestamps
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Lineup {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  
  // Game data
  agent       String
  ability     String
  map         String
  side        String // ATTACKER, DEFENDER
  difficulty  String // EASY, MEDIUM, HARD
  
  // Position data (JSON for flexibility)
  position     Json
  instructions String[]
  
  // Media
  images       String[]
  video        String?
  
  // Author
  createdById  String @db.ObjectId
  author       User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  // Stats
  views        Int @default(0)
  likes        Int @default(0)
  bookmarks    Int @default(0)
  
  // Status
  status       String @default("ACTIVE") // ACTIVE, HIDDEN, DELETED
  isPublic     Boolean @default(true)
  isFeatured   Boolean @default(false)
  
  // Relations
  comments     Comment[]
  userLikes    Like[]
  userBookmarks Bookmark[]
  reports      Report[]
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("lineups")
}

model Crosshair {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  shareCode   String  @unique
  
  // Crosshair settings (JSON for all settings)
  settings    Json
  
  // Author
  createdById String  @db.ObjectId
  author      User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  // Stats
  views       Int     @default(0)
  likes       Int     @default(0)
  downloads   Int     @default(0)
  
  // Status
  status      String  @default("ACTIVE") // ACTIVE, HIDDEN, DELETED
  isPublic    Boolean @default(true)
  isFeatured  Boolean @default(false)
  
  // Relations
  comments    Comment[]
  userLikes   Like[]
  userBookmarks Bookmark[]
  reports     Report[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("crosshairs")
}

model Comment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  
  // Author
  userId   String  @db.ObjectId
  author   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity info
  entityType  String   // LINEUP, CROSSHAIR, USER
  entityId    String   @db.ObjectId
  
  // Optional relations (manually handled in application logic)
  lineup      Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair   Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Nested comments
  parentId    String?  @db.ObjectId
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[] @relation("CommentReplies")
  
  // Status
  status      String   @default("ACTIVE") // ACTIVE, HIDDEN, DELETED
  isEdited    Boolean  @default(false)
  
  // Stats
  likes       Int      @default(0)
  stats       Json     @default("{}")
  
  // Relations
  userLikes   Like[]
  reports     Report[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // User
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType String  // LINEUP, CROSSHAIR, COMMENT
  entityId   String  @db.ObjectId
  
  // Optional relations (manually handled in application logic)
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, entityType, entityId])
  @@map("likes")
}

model Bookmark {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String?
  
  // User
  userId       String  @db.ObjectId
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType   String  // LINEUP, CROSSHAIR
  entityId     String  @db.ObjectId
  
  // Optional relations (manually handled in application logic)
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, entityType, entityId])
  @@map("bookmarks")
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Report {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  reason ReportReason
  description String?
  
  // Reporter
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity
  entityType String // LINEUP, CROSSHAIR, COMMENT, USER
  entityId   String @db.ObjectId
  
  // Optional relations (manually handled in application logic)
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Status
  status       String   @default("PENDING") // PENDING, REVIEWED, RESOLVED, DISMISSED
  reviewedAt   DateTime?
  reviewedById String?  @db.ObjectId
  resolution   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reports")
}

// ENHANCED SESSION MODEL - Complete OAuth Support
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  refreshToken String?  @unique
  
  // User
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session data  
  userAgent    String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  
  // Device/Context info (Enhanced)
  deviceInfo   Json?    // browser, OS, device type, screen resolution
  location     Json?    // city, country, timezone based on IP
  
  // Session lifecycle (Enhanced)
  lastActivity DateTime @default(now())
  loginMethod  String?  // oauth_google, oauth_discord, credentials
  
  // Admin specific (New)
  isAdminSession Boolean @default(false)
  adminRights    Json?   // specific admin permissions, features accessed
  
  // Security (New)
  riskScore      Float?  @default(0) // suspicious activity score
  isVerified     Boolean @default(true) // email/2FA verification status
  
  // Timestamps
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model AuthEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // User
  userId    String?  @db.ObjectId // Nullable for failed login attempts
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Event details
  eventType String   // LOGIN, LOGOUT, ADMIN_ACCESS, FAILED_LOGIN, PERMISSION_CHANGE, SESSION_EXPIRED
  success   Boolean  @default(true)
  
  // Context
  ipAddress String?
  userAgent String? 
  location  Json?    // Geolocation data
  details   Json?    // Additional event-specific data
  
  // Security
  riskLevel String?  // LOW, MEDIUM, HIGH, CRITICAL
  blocked   Boolean  @default(false)
  
  // Admin specific
  adminAction   String? // If this was an admin action: USER_CREATED, USER_BANNED, etc
  targetUserId  String? @db.ObjectId // If action was performed on another user
  
  // Timestamps
  createdAt DateTime @default(now())

  @@map("auth_events")
}

model Account {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  type       AccountType
  provider   String
  providerId String
  
  // OAuth tokens
  accessToken      String?
  refreshToken     String?
  expiresAt        DateTime?
  tokenType        String?
  scope            String?
  idToken          String?
  sessionState     String?
  
  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("accounts")
}

model Achievement {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  icon        String
  category    String
  
  // Requirements (JSON for flexibility)
  requirements Json
  
  // Reward
  points       Int     @default(0)
  badge        String?
  
  // Status
  isActive     Boolean @default(true)
  rarity       String  @default("COMMON") // COMMON, RARE, EPIC, LEGENDARY
  
  // Relations
  userAchievements UserAchievement[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model UserAchievement {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  achievementId String      @db.ObjectId
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Progress
  progress      Json?
  completedAt   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Activity {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  type ActivityType
  
  // User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Activity data
  entityType String? // LINEUP, CROSSHAIR, COMMENT, USER
  entityId   String? @db.ObjectId
  
  // Context information
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  deviceInfo  Json?   // browser, OS, screen size, etc.
  location    Json?   // geolocation data
  
  // Performance metrics
  duration    Int?    // milliseconds for timed actions
  success     Boolean @default(true)
  errorCode   String?
  
  // Additional data (JSON for flexibility)
  metadata   Json?
  
  // Visibility
  isPublic   Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId, type, createdAt])
  @@index([type, createdAt])
  @@index([createdAt])
  @@map("activities")
}

// New comprehensive analytics model
model Analytics {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Time period
  date     DateTime
  hour     Int      // 0-23 for hourly analytics
  
  // User metrics
  activeUsers        Int @default(0)
  newUsers          Int @default(0)
  returningUsers    Int @default(0)
  premiumUsers      Int @default(0)
  
  // Content metrics
  lineupsCreated    Int @default(0)
  lineupsViewed     Int @default(0)
  lineupsLiked      Int @default(0)
  crosshairsCreated Int @default(0)
  crosshairsViewed  Int @default(0)
  crosshairsDownloaded Int @default(0)
  commentsPosted    Int @default(0)
  
  // Engagement metrics
  avgSessionDuration Float? // minutes
  pageViews         Int @default(0)
  uniquePageViews   Int @default(0)
  bounceRate        Float? // percentage
  
  // System metrics
  apiRequests       Int @default(0)
  errors            Int @default(0)
  responseTime      Float? // average response time in ms
  
  // Additional metrics (JSON for flexibility)
  additionalMetrics Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([date, hour])
  @@index([date])
  @@map("analytics")
}

// Page views and user behavior tracking
model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // User (optional for guest tracking)
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Page information
  path        String
  title       String?
  referrer    String?
  
  // Session information
  sessionId   String
  
  // Device/Browser information
  userAgent   String?
  ipAddress   String?
  deviceType  String? // mobile, tablet, desktop
  browser     String?
  os          String?
  screenSize  String?
  
  // Location information
  country     String?
  city        String?
  
  // Performance metrics
  loadTime    Int?    // page load time in ms
  timeOnPage  Int?    // time spent on page in seconds
  
  // Engagement metrics
  scrollDepth Float?  // percentage of page scrolled
  clicks      Int     @default(0)
  
  // Timestamps
  viewedAt DateTime @default(now())
  leftAt   DateTime?
  
  @@index([userId, viewedAt])
  @@index([path, viewedAt])
  @@index([viewedAt])
  @@map("page_views")
}

// System performance monitoring
model SystemMetric {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Metric information
  metricType String  // cpu_usage, memory_usage, response_time, error_rate, etc.
  value      Float
  unit       String? // percentage, ms, mb, etc.
  
  // Context
  source     String? // server_name, service_name, etc.
  endpoint   String? // for API metrics
  
  // Metadata
  metadata   Json?
  
  // Timestamps
  recordedAt DateTime @default(now())
  
  @@index([metricType, recordedAt])
  @@index([recordedAt])
  @@map("system_metrics")
}

// Enhanced error tracking
model ErrorLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // User (optional)
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Error information
  errorType    String
  errorMessage String
  errorCode    String?
  statusCode   Int?
  
  // Request information
  method       String?
  endpoint     String?
  userAgent    String?
  ipAddress    String?
  
  // Stack trace and context
  stackTrace   String?
  requestBody  Json?
  queryParams  Json?
  headers      Json?
  
  // Resolution tracking
  isResolved   Boolean @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  resolution   String?
  
  // Timestamps
  occurredAt DateTime @default(now())
  
  @@index([userId, occurredAt])
  @@index([errorType, occurredAt])
  @@index([occurredAt])
  @@map("error_logs")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  COPYRIGHT
  MISLEADING_INFO
  DUPLICATE
  OTHER
}

enum ActivityType {
  // User Authentication
  LOGIN
  LOGOUT
  ACCOUNT_CREATED
  EMAIL_VERIFIED
  PASSWORD_CHANGED
  
  // Content Creation
  LINEUP_CREATED
  LINEUP_UPDATED
  LINEUP_DELETED
  CROSSHAIR_CREATED
  CROSSHAIR_UPDATED
  CROSSHAIR_DELETED
  COMMENT_POSTED
  COMMENT_EDITED
  COMMENT_DELETED
  
  // Content Interaction
  LINEUP_VIEWED
  LINEUP_LIKED
  LINEUP_UNLIKED
  LINEUP_BOOKMARKED
  LINEUP_UNBOOKMARKED
  CROSSHAIR_VIEWED
  CROSSHAIR_LIKED
  CROSSHAIR_UNLIKED
  CROSSHAIR_DOWNLOADED
  CROSSHAIR_SHARED
  COMMENT_LIKED
  COMMENT_UNLIKED
  
  // Social Interactions
  USER_FOLLOWED
  USER_UNFOLLOWED
  USER_BLOCKED
  USER_UNBLOCKED
  
  // Achievements & Gamification
  ACHIEVEMENT_EARNED
  LEVEL_UP
  STREAK_EARNED
  
  // Content Moderation
  CONTENT_REPORTED
  REPORT_SUBMITTED
  REPORT_REVIEWED
  CONTENT_MODERATED
  
  // Admin Actions
  ADMIN_ACTION
  USER_PROMOTED
  USER_DEMOTED
  USER_BANNED
  USER_UNBANNED
  BULK_ACTION_PERFORMED
  
  // System Events
  PROFILE_UPDATED
  SETTINGS_CHANGED
  SEARCH_PERFORMED
  ERROR_ENCOUNTERED
  API_REQUEST_MADE
}

enum AccountType {
  oauth
  credentials
}
