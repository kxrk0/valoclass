// ValoClass Unified Schema - MongoDB Compatible
// Merging friend's changes with our analytics system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  passwordHash String?
  displayName String?
  avatar    String?
  banner    String?
  bio       String?
  location  String?
  website   String?
  riotId    String?
  role      UserRole @default(USER)
  
  // Status flags
  isVerified Boolean @default(false)
  isPremium  Boolean @default(false)
  isActive   Boolean @default(true)
  
  // Profile data
  country      String?
  favoriteAgent String?
  
  // Game stats and preferences (JSON for flexibility)
  gameStats    Json?
  preferences  Json @default("{}")
  stats        Json @default("{}")
  
  // Social
  followers Int @default(0)
  following Int @default(0)
  
  // Timestamps
  lastLoginAt    DateTime?
  emailVerifiedAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  lineups         Lineup[]
  crosshairs      Crosshair[]
  comments        Comment[]
  likes           Like[]
  bookmarks       Bookmark[]
  reports         Report[]
  followers_rel   Follow[] @relation("UserFollowers")
  following_rel   Follow[] @relation("UserFollowing")
  sessions        Session[]
  achievements    UserAchievement[]
  activities      Activity[]
  accounts        Account[]
  pageViews       PageView[]
  errorLogs       ErrorLog[]
  
  @@map("users")
}

model Lineup {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  agent       String
  ability     String
  map         String
  side        LineupSide
  difficulty  Difficulty
  
  // Position data
  position Json
  
  // Content
  instructions String[]
  images       String[]
  videoUrl     String?
  tags         String[]
  
  // Status
  status    LineupStatus @default(DRAFT)
  featured  Boolean      @default(false)
  verified  Boolean      @default(false)
  
  // Stats
  stats Json @default("{}")
  
  // SEO
  seo Json @default("{}")
  
  // Relations
  createdBy    String @db.ObjectId
  creator      User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  moderatedBy  String?
  moderatedAt  DateTime?
  
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  reports   Report[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lineups")
}

model Crosshair {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  shareCode   String  @unique
  valorantCode String
  
  // Settings
  settings Json
  
  // Metadata
  tags      String[]
  category  CrosshairCategory @default(GENERAL)
  isPublic  Boolean @default(false)
  featured  Boolean @default(false)
  
  // Community Stats
  likes     Int @default(0)
  downloads Int @default(0)
  views     Int @default(0)
  
  // User Info (optional)
  region    String?
  rank      String?
  
  // Additional Stats
  stats Json @default("{}")
  
  // Relations
  createdBy String @db.ObjectId
  creator   User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  comments  Comment[]
  userLikes Like[]
  bookmarks Bookmark[]
  reports   Report[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("crosshairs")
}

model Comment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  parentId String? @db.ObjectId
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")
  
  // Entity reference (polymorphic)
  entityType CommentEntity
  entityId   String @db.ObjectId
  
  // Relations
  authorId String @db.ObjectId
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  lineup     Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair  Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  likes   Like[]
  reports Report[]
  
  // Status
  isEdited Boolean       @default(false)
  status   CommentStatus @default(ACTIVE)
  
  // Stats
  stats Json @default("{}")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Entity reference (polymorphic)
  entityType LikeEntity
  entityId   String @db.ObjectId
  
  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@unique([userId, entityType, entityId])
  @@map("likes")
}

model Bookmark {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String?
  
  // Entity reference (polymorphic)
  entityType BookmarkEntity
  entityId   String @db.ObjectId
  
  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@unique([userId, entityType, entityId])
  @@map("bookmarks")
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@unique([followerId, followingId])
  @@map("follows")
}

model Report {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  reason ReportReason
  description String?
  
  // Entity reference (polymorphic)
  entityType ReportEntity
  entityId   String @db.ObjectId
  
  // Relations
  reporterId String @db.ObjectId
  reporter   User @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  lineup    Lineup?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  crosshair Crosshair? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Review
  status       ReportStatus @default(PENDING)
  reviewedBy   String?
  reviewedAt   DateTime?
  resolution   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reports")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime @default(now())
  
  // Enhanced tracking
  deviceInfo   Json?
  location     Json?
  isAdminSession Boolean @default(false)
  adminRights    Json?
  riskScore      Float?  @default(0)
  isVerified     Boolean @default(true)
  
  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("sessions")
}

model Account {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  type       AccountType
  provider   String
  providerId String
  
  // OAuth tokens
  accessToken      String?
  refreshToken     String?
  expiresAt        DateTime?
  tokenType        String?
  scope            String?
  idToken          String?
  sessionState     String?
  
  // Relations
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("accounts")
}

model Achievement {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  icon        String
  category    AchievementCategory
  
  // Requirements
  requirements Json
  
  // Rewards
  rewards Json
  
  // Status
  isActive Boolean @default(true)
  
  // Relations
  userAchievements UserAchievement[]
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("achievements")
}

model UserAchievement {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  userId        String @db.ObjectId
  achievementId String @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Progress
  progress Int?
  earnedAt DateTime @default(now())
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Activity {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  type ActivityType
  
  // User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entity reference (optional)
  entityType String?
  entityId   String? @db.ObjectId
  
  // Context information
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  deviceInfo  Json?
  location    Json?
  
  // Performance metrics
  duration    Int?
  success     Boolean @default(true)
  errorCode   String?
  
  // Data
  data     Json
  metadata Json?
  isPublic Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@index([userId, type, createdAt])
  @@index([type, createdAt])
  @@index([createdAt])
  @@map("activities")
}

// Analytics models
model Analytics {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Time period
  date     DateTime
  hour     Int      // 0-23 for hourly analytics
  
  // User metrics
  activeUsers        Int @default(0)
  newUsers          Int @default(0)
  returningUsers    Int @default(0)
  premiumUsers      Int @default(0)
  
  // Content metrics
  lineupsCreated    Int @default(0)
  lineupsViewed     Int @default(0)
  lineupsLiked      Int @default(0)
  crosshairsCreated Int @default(0)
  crosshairsViewed  Int @default(0)
  crosshairsDownloaded Int @default(0)
  commentsPosted    Int @default(0)
  
  // Engagement metrics
  avgSessionDuration Float?
  pageViews         Int @default(0)
  uniquePageViews   Int @default(0)
  bounceRate        Float?
  
  // System metrics
  apiRequests       Int @default(0)
  errors            Int @default(0)
  responseTime      Float?
  
  // Additional metrics
  additionalMetrics Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([date, hour])
  @@index([date])
  @@map("analytics")
}

model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // User (optional for guest tracking)
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Page information
  path        String
  title       String?
  referrer    String?
  
  // Session information
  sessionId   String
  
  // Device/Browser information
  userAgent   String?
  ipAddress   String?
  deviceType  String?
  browser     String?
  os          String?
  screenSize  String?
  
  // Location information
  country     String?
  city        String?
  
  // Performance metrics
  loadTime    Int?
  timeOnPage  Int?
  
  // Engagement metrics
  scrollDepth Float?
  clicks      Int     @default(0)
  
  // Timestamps
  viewedAt DateTime @default(now())
  leftAt   DateTime?
  
  @@index([userId, viewedAt])
  @@index([path, viewedAt])
  @@index([viewedAt])
  @@map("page_views")
}

model SystemMetric {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Metric information
  metricType String
  value      Float
  unit       String?
  
  // Context
  source     String?
  endpoint   String?
  
  // Metadata
  metadata   Json?
  
  // Timestamps
  recordedAt DateTime @default(now())
  
  @@index([metricType, recordedAt])
  @@index([recordedAt])
  @@map("system_metrics")
}

model ErrorLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // User (optional)
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Error information
  errorType    String
  errorMessage String
  errorCode    String?
  statusCode   Int?
  
  // Request information
  method       String?
  endpoint     String?
  userAgent    String?
  ipAddress    String?
  
  // Stack trace and context
  stackTrace   String?
  requestBody  Json?
  queryParams  Json?
  headers      Json?
  
  // Resolution tracking
  isResolved   Boolean @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  resolution   String?
  
  // Timestamps
  occurredAt DateTime @default(now())
  
  @@index([userId, occurredAt])
  @@index([errorType, occurredAt])
  @@index([occurredAt])
  @@map("error_logs")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum LineupSide {
  ATTACKER
  DEFENDER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum LineupStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentEntity {
  LINEUP
  CROSSHAIR
  USER
}

enum CommentStatus {
  ACTIVE
  HIDDEN
  DELETED
}

enum LikeEntity {
  LINEUP
  CROSSHAIR
  COMMENT
}

enum BookmarkEntity {
  LINEUP
  CROSSHAIR
}

enum ReportEntity {
  LINEUP
  CROSSHAIR
  COMMENT
  USER
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  COPYRIGHT
  HARASSMENT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum AchievementCategory {
  CONTENT
  SOCIAL
  ENGAGEMENT
  SPECIAL
}

enum ActivityType {
  // User Authentication
  LOGIN
  LOGOUT
  ACCOUNT_CREATED
  EMAIL_VERIFIED
  PASSWORD_CHANGED
  
  // Content Creation
  LINEUP_CREATED
  LINEUP_UPDATED
  LINEUP_DELETED
  CROSSHAIR_CREATED
  CROSSHAIR_UPDATED
  CROSSHAIR_DELETED
  COMMENT_POSTED
  COMMENT_EDITED
  COMMENT_DELETED
  
  // Content Interaction
  LINEUP_VIEWED
  LINEUP_LIKED
  LINEUP_UNLIKED
  LINEUP_BOOKMARKED
  LINEUP_UNBOOKMARKED
  CROSSHAIR_VIEWED
  CROSSHAIR_LIKED
  CROSSHAIR_UNLIKED
  CROSSHAIR_DOWNLOADED
  CROSSHAIR_SHARED
  COMMENT_LIKED
  COMMENT_UNLIKED
  
  // Social Interactions
  USER_FOLLOWED
  USER_UNFOLLOWED
  USER_BLOCKED
  USER_UNBLOCKED
  
  // Achievements & Gamification
  ACHIEVEMENT_EARNED
  LEVEL_UP
  STREAK_EARNED
  RANK_UPDATED
  
  // Content Moderation
  CONTENT_REPORTED
  REPORT_SUBMITTED
  REPORT_REVIEWED
  CONTENT_MODERATED
  
  // Admin Actions
  ADMIN_ACTION
  USER_PROMOTED
  USER_DEMOTED
  USER_BANNED
  USER_UNBANNED
  BULK_ACTION_PERFORMED
  
  // System Events
  PROFILE_UPDATED
  SETTINGS_CHANGED
  SEARCH_PERFORMED
  ERROR_ENCOUNTERED
  API_REQUEST_MADE
}

enum AccountType {
  oauth
  credentials
}

enum CrosshairCategory {
  GENERAL
  PRIMARY
  ADS
  SNIPER
}
